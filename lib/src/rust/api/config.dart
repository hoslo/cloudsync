// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.30.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `DatabaseConfig` is not used by any `pub` functions, thus it is ignored.

class Config {
  final int id;
  final String name;
  final ServiceType serviceType;
  final Map<String, String> config;
  final int current;

  const Config({
    required this.id,
    required this.name,
    required this.serviceType,
    required this.config,
    required this.current,
  });

  static Future<void> changeCurrentConfig({required int id, dynamic hint}) =>
      RustLib.instance.api.configChangeCurrentConfig(
        id: id,
        hint: hint,
      );

  static Future<List<Config>> listConfigs({dynamic hint}) =>
      RustLib.instance.api.configListConfigs(
        hint: hint,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Config> newInstance(
          {required String name,
          required ServiceType serviceType,
          required Map<String, String> config,
          dynamic hint}) =>
      RustLib.instance.api.configNew(
        name: name,
        serviceType: serviceType,
        config: config,
        hint: hint,
      );

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      serviceType.hashCode ^
      config.hashCode ^
      current.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Config &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          serviceType == other.serviceType &&
          config == other.config &&
          current == other.current;
}

class Entry {
  final String path;
  final EntryMode mode;
  final int contentLength;
  final String? contentType;
  final int? lastModified;

  const Entry({
    required this.path,
    required this.mode,
    required this.contentLength,
    this.contentType,
    this.lastModified,
  });

  @override
  int get hashCode =>
      path.hashCode ^
      mode.hashCode ^
      contentLength.hashCode ^
      contentType.hashCode ^
      lastModified.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Entry &&
          runtimeType == other.runtimeType &&
          path == other.path &&
          mode == other.mode &&
          contentLength == other.contentLength &&
          contentType == other.contentType &&
          lastModified == other.lastModified;
}

enum EntryMode {
  file,
  dir,
  unknown,
}

enum ServiceType {
  s3,
  azblob,
  azdls,
  cos,
  oss,
  gcs,
}
